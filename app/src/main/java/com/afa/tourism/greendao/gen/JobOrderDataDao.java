package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.JobOrderData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOB_ORDER_DATA".
*/
public class JobOrderDataDao extends AbstractDao<JobOrderData, String> {

    public static final String TABLENAME = "JOB_ORDER_DATA";

    /**
     * Properties of entity JobOrderData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WorkType = new Property(0, String.class, "workType", true, "WORK_TYPE");
        public final static Property Industry = new Property(1, String.class, "industry", false, "INDUSTRY");
        public final static Property ExpectArea = new Property(2, String.class, "expectArea", false, "EXPECT_AREA");
        public final static Property ExpectPosition = new Property(3, String.class, "expectPosition", false, "EXPECT_POSITION");
        public final static Property JobStyle = new Property(4, String.class, "jobStyle", false, "JOB_STYLE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Salary = new Property(6, String.class, "salary", false, "SALARY");
        public final static Property Mode = new Property(7, String.class, "mode", false, "MODE");
    }


    public JobOrderDataDao(DaoConfig config) {
        super(config);
    }
    
    public JobOrderDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOB_ORDER_DATA\" (" + //
                "\"WORK_TYPE\" TEXT PRIMARY KEY NOT NULL ," + // 0: workType
                "\"INDUSTRY\" TEXT," + // 1: industry
                "\"EXPECT_AREA\" TEXT," + // 2: expectArea
                "\"EXPECT_POSITION\" TEXT," + // 3: expectPosition
                "\"JOB_STYLE\" TEXT," + // 4: jobStyle
                "\"ADDRESS\" TEXT," + // 5: address
                "\"SALARY\" TEXT," + // 6: salary
                "\"MODE\" TEXT);"); // 7: mode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOB_ORDER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JobOrderData entity) {
        stmt.clearBindings();
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(1, workType);
        }
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(2, industry);
        }
 
        String expectArea = entity.getExpectArea();
        if (expectArea != null) {
            stmt.bindString(3, expectArea);
        }
 
        String expectPosition = entity.getExpectPosition();
        if (expectPosition != null) {
            stmt.bindString(4, expectPosition);
        }
 
        String jobStyle = entity.getJobStyle();
        if (jobStyle != null) {
            stmt.bindString(5, jobStyle);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String salary = entity.getSalary();
        if (salary != null) {
            stmt.bindString(7, salary);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(8, mode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JobOrderData entity) {
        stmt.clearBindings();
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(1, workType);
        }
 
        String industry = entity.getIndustry();
        if (industry != null) {
            stmt.bindString(2, industry);
        }
 
        String expectArea = entity.getExpectArea();
        if (expectArea != null) {
            stmt.bindString(3, expectArea);
        }
 
        String expectPosition = entity.getExpectPosition();
        if (expectPosition != null) {
            stmt.bindString(4, expectPosition);
        }
 
        String jobStyle = entity.getJobStyle();
        if (jobStyle != null) {
            stmt.bindString(5, jobStyle);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String salary = entity.getSalary();
        if (salary != null) {
            stmt.bindString(7, salary);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(8, mode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public JobOrderData readEntity(Cursor cursor, int offset) {
        JobOrderData entity = new JobOrderData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // workType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // industry
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // expectArea
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expectPosition
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jobStyle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // salary
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // mode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JobOrderData entity, int offset) {
        entity.setWorkType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIndustry(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpectArea(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpectPosition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJobStyle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSalary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(JobOrderData entity, long rowId) {
        return entity.getWorkType();
    }
    
    @Override
    public String getKey(JobOrderData entity) {
        if(entity != null) {
            return entity.getWorkType();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JobOrderData entity) {
        return entity.getWorkType() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
