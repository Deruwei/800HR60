package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.LoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_BEAN".
*/
public class LoginBeanDao extends AbstractDao<LoginBean, Long> {

    public static final String TABLENAME = "LOGIN_BEAN";

    /**
     * Properties of entity LoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LoginType = new Property(0, long.class, "loginType", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property ThirdPartLoginType = new Property(3, String.class, "thirdPartLoginType", false, "THIRD_PART_LOGIN_TYPE");
        public final static Property ThirdPartUid = new Property(4, String.class, "thirdPartUid", false, "THIRD_PART_UID");
        public final static Property ThirdPartSUid = new Property(5, String.class, "thirdPartSUid", false, "THIRD_PART_SUID");
    }


    public LoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: loginType
                "\"NAME\" TEXT," + // 1: name
                "\"PASSWORD\" TEXT," + // 2: password
                "\"THIRD_PART_LOGIN_TYPE\" TEXT," + // 3: thirdPartLoginType
                "\"THIRD_PART_UID\" TEXT," + // 4: thirdPartUid
                "\"THIRD_PART_SUID\" TEXT);"); // 5: thirdPartSUid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLoginType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String thirdPartLoginType = entity.getThirdPartLoginType();
        if (thirdPartLoginType != null) {
            stmt.bindString(4, thirdPartLoginType);
        }
 
        String thirdPartUid = entity.getThirdPartUid();
        if (thirdPartUid != null) {
            stmt.bindString(5, thirdPartUid);
        }
 
        String thirdPartSUid = entity.getThirdPartSUid();
        if (thirdPartSUid != null) {
            stmt.bindString(6, thirdPartSUid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLoginType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String thirdPartLoginType = entity.getThirdPartLoginType();
        if (thirdPartLoginType != null) {
            stmt.bindString(4, thirdPartLoginType);
        }
 
        String thirdPartUid = entity.getThirdPartUid();
        if (thirdPartUid != null) {
            stmt.bindString(5, thirdPartUid);
        }
 
        String thirdPartSUid = entity.getThirdPartSUid();
        if (thirdPartSUid != null) {
            stmt.bindString(6, thirdPartSUid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LoginBean readEntity(Cursor cursor, int offset) {
        LoginBean entity = new LoginBean( //
            cursor.getLong(offset + 0), // loginType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thirdPartLoginType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thirdPartUid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // thirdPartSUid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginBean entity, int offset) {
        entity.setLoginType(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThirdPartLoginType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThirdPartUid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThirdPartSUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginBean entity, long rowId) {
        entity.setLoginType(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginBean entity) {
        if(entity != null) {
            return entity.getLoginType();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
