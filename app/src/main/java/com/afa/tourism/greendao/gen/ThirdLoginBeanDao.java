package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.ThirdLoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THIRD_LOGIN_BEAN".
*/
public class ThirdLoginBeanDao extends AbstractDao<ThirdLoginBean, Long> {

    public static final String TABLENAME = "THIRD_LOGIN_BEAN";

    /**
     * Properties of entity ThirdLoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property NikeName = new Property(3, String.class, "nikeName", false, "NIKE_NAME");
        public final static Property UId = new Property(4, String.class, "uId", false, "U_ID");
        public final static Property BirthDay = new Property(5, String.class, "birthDay", false, "BIRTH_DAY");
        public final static Property Photo = new Property(6, String.class, "photo", false, "PHOTO");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property SUId = new Property(8, String.class, "sUId", false, "S_UID");
    }


    public ThirdLoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ThirdLoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THIRD_LOGIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"NAME\" TEXT," + // 2: name
                "\"NIKE_NAME\" TEXT," + // 3: nikeName
                "\"U_ID\" TEXT," + // 4: uId
                "\"BIRTH_DAY\" TEXT," + // 5: birthDay
                "\"PHOTO\" TEXT," + // 6: photo
                "\"GENDER\" TEXT," + // 7: gender
                "\"S_UID\" TEXT);"); // 8: sUId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THIRD_LOGIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThirdLoginBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(4, nikeName);
        }
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(5, uId);
        }
 
        String birthDay = entity.getBirthDay();
        if (birthDay != null) {
            stmt.bindString(6, birthDay);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String sUId = entity.getSUId();
        if (sUId != null) {
            stmt.bindString(9, sUId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThirdLoginBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(4, nikeName);
        }
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(5, uId);
        }
 
        String birthDay = entity.getBirthDay();
        if (birthDay != null) {
            stmt.bindString(6, birthDay);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String sUId = entity.getSUId();
        if (sUId != null) {
            stmt.bindString(9, sUId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ThirdLoginBean readEntity(Cursor cursor, int offset) {
        ThirdLoginBean entity = new ThirdLoginBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nikeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birthDay
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sUId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThirdLoginBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNikeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthDay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSUId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThirdLoginBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThirdLoginBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThirdLoginBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
