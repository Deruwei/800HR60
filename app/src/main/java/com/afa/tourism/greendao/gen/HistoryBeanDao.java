package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.HistoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_BEAN".
*/
public class HistoryBeanDao extends AbstractDao<HistoryBean, String> {

    public static final String TABLENAME = "HISTORY_BEAN";

    /**
     * Properties of entity HistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property JobType = new Property(0, int.class, "jobType", false, "JOB_TYPE");
        public final static Property SearchName = new Property(1, String.class, "searchName", true, "SEARCH_NAME");
        public final static Property PlaceId = new Property(2, String.class, "placeId", false, "PLACE_ID");
        public final static Property IndustryId = new Property(3, String.class, "industryId", false, "INDUSTRY_ID");
        public final static Property FieldId = new Property(4, String.class, "fieldId", false, "FIELD_ID");
        public final static Property WorkExp = new Property(5, String.class, "workExp", false, "WORK_EXP");
        public final static Property WorkType = new Property(6, String.class, "workType", false, "WORK_TYPE");
        public final static Property JobTime = new Property(7, String.class, "JobTime", false, "JOB_TIME");
        public final static Property Degree = new Property(8, String.class, "degree", false, "DEGREE");
        public final static Property CompanyScale = new Property(9, String.class, "companyScale", false, "COMPANY_SCALE");
        public final static Property Salary_left = new Property(10, String.class, "salary_left", false, "SALARY_LEFT");
        public final static Property Salary_right = new Property(11, String.class, "salary_right", false, "SALARY_RIGHT");
        public final static Property PositionId = new Property(12, String.class, "positionId", false, "POSITION_ID");
        public final static Property CompanyType = new Property(13, String.class, "companyType", false, "COMPANY_TYPE");
    }


    public HistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_BEAN\" (" + //
                "\"JOB_TYPE\" INTEGER NOT NULL ," + // 0: jobType
                "\"SEARCH_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 1: searchName
                "\"PLACE_ID\" TEXT," + // 2: placeId
                "\"INDUSTRY_ID\" TEXT," + // 3: industryId
                "\"FIELD_ID\" TEXT," + // 4: fieldId
                "\"WORK_EXP\" TEXT," + // 5: workExp
                "\"WORK_TYPE\" TEXT," + // 6: workType
                "\"JOB_TIME\" TEXT," + // 7: JobTime
                "\"DEGREE\" TEXT," + // 8: degree
                "\"COMPANY_SCALE\" TEXT," + // 9: companyScale
                "\"SALARY_LEFT\" TEXT," + // 10: salary_left
                "\"SALARY_RIGHT\" TEXT," + // 11: salary_right
                "\"POSITION_ID\" TEXT," + // 12: positionId
                "\"COMPANY_TYPE\" TEXT);"); // 13: companyType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getJobType());
 
        String searchName = entity.getSearchName();
        if (searchName != null) {
            stmt.bindString(2, searchName);
        }
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(3, placeId);
        }
 
        String industryId = entity.getIndustryId();
        if (industryId != null) {
            stmt.bindString(4, industryId);
        }
 
        String fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindString(5, fieldId);
        }
 
        String workExp = entity.getWorkExp();
        if (workExp != null) {
            stmt.bindString(6, workExp);
        }
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(7, workType);
        }
 
        String JobTime = entity.getJobTime();
        if (JobTime != null) {
            stmt.bindString(8, JobTime);
        }
 
        String degree = entity.getDegree();
        if (degree != null) {
            stmt.bindString(9, degree);
        }
 
        String companyScale = entity.getCompanyScale();
        if (companyScale != null) {
            stmt.bindString(10, companyScale);
        }
 
        String salary_left = entity.getSalary_left();
        if (salary_left != null) {
            stmt.bindString(11, salary_left);
        }
 
        String salary_right = entity.getSalary_right();
        if (salary_right != null) {
            stmt.bindString(12, salary_right);
        }
 
        String positionId = entity.getPositionId();
        if (positionId != null) {
            stmt.bindString(13, positionId);
        }
 
        String companyType = entity.getCompanyType();
        if (companyType != null) {
            stmt.bindString(14, companyType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getJobType());
 
        String searchName = entity.getSearchName();
        if (searchName != null) {
            stmt.bindString(2, searchName);
        }
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(3, placeId);
        }
 
        String industryId = entity.getIndustryId();
        if (industryId != null) {
            stmt.bindString(4, industryId);
        }
 
        String fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindString(5, fieldId);
        }
 
        String workExp = entity.getWorkExp();
        if (workExp != null) {
            stmt.bindString(6, workExp);
        }
 
        String workType = entity.getWorkType();
        if (workType != null) {
            stmt.bindString(7, workType);
        }
 
        String JobTime = entity.getJobTime();
        if (JobTime != null) {
            stmt.bindString(8, JobTime);
        }
 
        String degree = entity.getDegree();
        if (degree != null) {
            stmt.bindString(9, degree);
        }
 
        String companyScale = entity.getCompanyScale();
        if (companyScale != null) {
            stmt.bindString(10, companyScale);
        }
 
        String salary_left = entity.getSalary_left();
        if (salary_left != null) {
            stmt.bindString(11, salary_left);
        }
 
        String salary_right = entity.getSalary_right();
        if (salary_right != null) {
            stmt.bindString(12, salary_right);
        }
 
        String positionId = entity.getPositionId();
        if (positionId != null) {
            stmt.bindString(13, positionId);
        }
 
        String companyType = entity.getCompanyType();
        if (companyType != null) {
            stmt.bindString(14, companyType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public HistoryBean readEntity(Cursor cursor, int offset) {
        HistoryBean entity = new HistoryBean( //
            cursor.getInt(offset + 0), // jobType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // placeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // industryId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fieldId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // workExp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // workType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // JobTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // degree
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // companyScale
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // salary_left
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // salary_right
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // positionId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // companyType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryBean entity, int offset) {
        entity.setJobType(cursor.getInt(offset + 0));
        entity.setSearchName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlaceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndustryId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFieldId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorkExp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWorkType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJobTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDegree(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompanyScale(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSalary_left(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSalary_right(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPositionId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCompanyType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HistoryBean entity, long rowId) {
        return entity.getSearchName();
    }
    
    @Override
    public String getKey(HistoryBean entity) {
        if(entity != null) {
            return entity.getSearchName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryBean entity) {
        return entity.getSearchName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
