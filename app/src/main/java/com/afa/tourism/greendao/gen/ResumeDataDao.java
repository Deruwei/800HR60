package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.ResumeData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESUME_DATA".
*/
public class ResumeDataDao extends AbstractDao<ResumeData, String> {

    public static final String TABLENAME = "RESUME_DATA";

    /**
     * Properties of entity ResumeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResumeId = new Property(0, String.class, "resumeId", true, "RESUME_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Complete = new Property(2, String.class, "complete", false, "COMPLETE");
        public final static Property ImageId = new Property(3, int.class, "imageId", false, "IMAGE_ID");
    }


    public ResumeDataDao(DaoConfig config) {
        super(config);
    }
    
    public ResumeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESUME_DATA\" (" + //
                "\"RESUME_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: resumeId
                "\"TITLE\" TEXT," + // 1: title
                "\"COMPLETE\" TEXT," + // 2: complete
                "\"IMAGE_ID\" INTEGER NOT NULL );"); // 3: imageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESUME_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResumeData entity) {
        stmt.clearBindings();
 
        String resumeId = entity.getResumeId();
        if (resumeId != null) {
            stmt.bindString(1, resumeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(3, complete);
        }
        stmt.bindLong(4, entity.getImageId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResumeData entity) {
        stmt.clearBindings();
 
        String resumeId = entity.getResumeId();
        if (resumeId != null) {
            stmt.bindString(1, resumeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(3, complete);
        }
        stmt.bindLong(4, entity.getImageId());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ResumeData readEntity(Cursor cursor, int offset) {
        ResumeData entity = new ResumeData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // resumeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // complete
            cursor.getInt(offset + 3) // imageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResumeData entity, int offset) {
        entity.setResumeId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComplete(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageId(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ResumeData entity, long rowId) {
        return entity.getResumeId();
    }
    
    @Override
    public String getKey(ResumeData entity) {
        if(entity != null) {
            return entity.getResumeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResumeData entity) {
        return entity.getResumeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
