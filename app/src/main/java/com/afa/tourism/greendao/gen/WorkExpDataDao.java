package com.afa.tourism.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hr.ui.bean.WorkExpData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK_EXP_DATA".
*/
public class WorkExpDataDao extends AbstractDao<WorkExpData, String> {

    public static final String TABLENAME = "WORK_EXP_DATA";

    /**
     * Properties of entity WorkExpData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Company = new Property(0, String.class, "company", true, "COMPANY");
        public final static Property Position = new Property(1, String.class, "position", false, "POSITION");
        public final static Property WorkPlace = new Property(2, String.class, "workPlace", false, "WORK_PLACE");
        public final static Property GrossPay = new Property(3, String.class, "grossPay", false, "GROSS_PAY");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property ResponsibilityDescription = new Property(6, String.class, "responsibilityDescription", false, "RESPONSIBILITY_DESCRIPTION");
    }


    public WorkExpDataDao(DaoConfig config) {
        super(config);
    }
    
    public WorkExpDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK_EXP_DATA\" (" + //
                "\"COMPANY\" TEXT PRIMARY KEY NOT NULL ," + // 0: company
                "\"POSITION\" TEXT," + // 1: position
                "\"WORK_PLACE\" TEXT," + // 2: workPlace
                "\"GROSS_PAY\" TEXT," + // 3: grossPay
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"RESPONSIBILITY_DESCRIPTION\" TEXT);"); // 6: responsibilityDescription
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK_EXP_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkExpData entity) {
        stmt.clearBindings();
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(1, company);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(2, position);
        }
 
        String workPlace = entity.getWorkPlace();
        if (workPlace != null) {
            stmt.bindString(3, workPlace);
        }
 
        String grossPay = entity.getGrossPay();
        if (grossPay != null) {
            stmt.bindString(4, grossPay);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String responsibilityDescription = entity.getResponsibilityDescription();
        if (responsibilityDescription != null) {
            stmt.bindString(7, responsibilityDescription);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkExpData entity) {
        stmt.clearBindings();
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(1, company);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(2, position);
        }
 
        String workPlace = entity.getWorkPlace();
        if (workPlace != null) {
            stmt.bindString(3, workPlace);
        }
 
        String grossPay = entity.getGrossPay();
        if (grossPay != null) {
            stmt.bindString(4, grossPay);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String responsibilityDescription = entity.getResponsibilityDescription();
        if (responsibilityDescription != null) {
            stmt.bindString(7, responsibilityDescription);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WorkExpData readEntity(Cursor cursor, int offset) {
        WorkExpData entity = new WorkExpData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // company
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // position
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workPlace
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grossPay
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // responsibilityDescription
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkExpData entity, int offset) {
        entity.setCompany(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPosition(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkPlace(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrossPay(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResponsibilityDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WorkExpData entity, long rowId) {
        return entity.getCompany();
    }
    
    @Override
    public String getKey(WorkExpData entity) {
        if(entity != null) {
            return entity.getCompany();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkExpData entity) {
        return entity.getCompany() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
